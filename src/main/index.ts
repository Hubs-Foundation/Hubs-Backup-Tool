import {
  app,
  BrowserWindow,
  dialog,
  ipcMain,
  shell,
  globalShortcut,
} from "electron";
import api from "../api";

if (process.env.NODE_ENV !== "production") {
  process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
}

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

async function handleSelectDirectory() {
  const { canceled, filePaths } = await dialog.showOpenDialog({
    title: "Choose an output directory",
    buttonLabel: "Select Directory",
    properties: ["openDirectory", "createDirectory", "promptToCreate"],
  });
  if (!canceled) {
    return filePaths[0];
  }
}

async function handleOpenDirectory(
  _event: Electron.IpcMainInvokeEvent,
  dir: string
) {
  shell.showItemInFolder(dir);
}

async function handleOpenInBrowser(
  _event: Electron.IpcMainInvokeEvent,
  url: string
) {
  shell.openExternal(url);
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 920,
    width: 1280,
    backgroundColor: "#f2f2f2",
    autoHideMenuBar: true,
    resizable: false,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: true,
      devTools: process.env.NODE_ENV !== "production",
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegrationInWorker: true,
    },
  });

  mainWindow.webContents.session.webRequest.onBeforeSendHeaders(
    (details, callback) => {
      callback({ requestHeaders: { Origin: "*", ...details.requestHeaders } });
    }
  );

  mainWindow.webContents.session.webRequest.onHeadersReceived(
    (details, callback) => {
      callback({
        responseHeaders: {
          "Access-Control-Allow-Origin": ["*"],
          "Content-Security-Policy":
            "default-src * self blob: data: gap: ws: demo.hubsfoundation.org 'unsafe-inline'; style-src * self 'unsafe-inline' blob: data: gap:; script-src * 'self' 'unsafe-eval' 'unsafe-inline' blob: data: gap:; object-src * 'self' blob: data: gap:; img-src * self 'unsafe-inline' blob: data: gap:; connect-src self * 'unsafe-inline' blob: data: gap:; frame-src * self blob: data: gap:;",
          ...details.responseHeaders,
        },
      });
    }
  );

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.on("close", (e) => {
    const res = dialog.showMessageBoxSync(mainWindow, {
      message:
        "Are you sure you want to quit? This will interrupt any ongoing backups",
      type: "question",
      buttons: ["No", "Yes"],
      defaultId: 0,
      title: "Exit?",
      cancelId: 0,
    });
    if (res !== 1) {
      e.preventDefault();
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow();
  ipcMain.handle("electronAPI:selectDirectory", handleSelectDirectory);
  ipcMain.handle("electronAPI:openDirectory", handleOpenDirectory);
  ipcMain.handle("electronAPI:openInBrowser", handleOpenInBrowser);
  ipcMain.handle("hubs:getLogFilePath", api.getLogFilePath);
  ipcMain.handle("hubs:authReticulum", api.authReticulum);
  ipcMain.handle("hubs:startBackup", api.startBackup);
  ipcMain.handle("hubs:cancelBackup", api.cancelBackup);
  ipcMain.handle("hubs:getSupportedEndpoints", api.getSupportedEndpoints);
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  // if (process.platform !== "darwin") {
  app.quit();
  // }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on("browser-window-focus", function () {
  globalShortcut.register("CommandOrControl+R", () => {
    console.log("CommandOrControl+R is pressed: Shortcut Disabled");
  });
  globalShortcut.register("F5", () => {
    console.log("F5 is pressed: Shortcut Disabled");
  });
});

app.on("browser-window-blur", function () {
  globalShortcut.unregister("CommandOrControl+R");
  globalShortcut.unregister("F5");
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
app.commandLine.appendSwitch("ignore-certificate-errors");
